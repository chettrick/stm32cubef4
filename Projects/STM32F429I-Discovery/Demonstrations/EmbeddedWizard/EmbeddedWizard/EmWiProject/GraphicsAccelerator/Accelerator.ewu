$version 6.60

// This is the root component of the entire GUI application.
$rect <20,20,220,60>
$output false
class Accelerator : Core::Group
{
  $rect <0,300,200,340>
  inherited property Bounds = <0,0,320,240>;

  $rect <740,270,940,310>
  inherited method UpdateLayout()
  {
    aSize;

    /* ensure that embedded graphics factory will use the given number of items */
    ChangeType( GraphicsFactory.TypeOfItems );

  }

  // This is the Application class of the GraphicsAccelerator example.
  // 
  // The intention of this example is to demonstrate the advantage of a graphics \
  // accelerator. For this purpose, a set of basic drawing operations are executed \
  // permanently and continuously: As a result, an endless stream of drawing insturctions \
  // is produced...
  // The entire processing of this drawing operations is implemented within the class \
  // @GraphicsFactory.
  // 
  // The Application class, just uses and configures this @GraphicsFactory. On the \
  // right and bottom area, a couple of control elements and text items are placed \
  // in order to receive user inputs and to display the current measurements and \
  // states.
  // 
  // To run the application within the Prototyper, press 'F5'.
  // 
  // To generate code for the target, press 'F8'.
  note legend Note1
  {
    attr Bounds = <10,350,900,590>;
  }

  // This is a filled rectangle view.
  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset Bounds = <0,0,320,240>;
    preset Color = #080820FF;
  }

  $rect <20,20,160,60>
  object Accelerator::GraphicsFactory GraphicsFactory
  {
    preset Bounds = <0,30,230,240>;
    preset NoOfItems = 7;
    preset TypeOfItems = Accelerator::GraphicsType.AlphaBmp;
  }

  // This is a timer object.
  $rect <340,10,540,50>
  object Core::Timer PerformanceTimer
  {
    preset OnTrigger = PerformanceSlot;
    preset Enabled = true;
  }

  // This is a slot method.
  $rect <540,10,740,50>
  slot PerformanceSlot
  {
    var int32 cpu = -1;

    $if !$prototyper

    native ( cpu )
    {
      #if EW_CPU_LOAD_MEASURING == 1
        extern int EwBspGetCpuLoad( void );

        cpu = EwBspGetCpuLoad();
      #endif
    }

    $endif

    if ( GetRoot() != null )
      FpsText.String = string(GetRoot().GetFPS()) + " fps";

    if (( cpu >= 0 ) && ( cpu <= 100 )) 
    {
      CpuText.String = string( cpu ) + " %%";

      var color c = color( (uint8)( cpu * 255 / 100 ), (uint8)( (100 - cpu ) * 255 / 100 ), 0x00, 0xFF );
      CpuText.Color = c;
       
    }
    else
    {
      CpuText.String = "-";
      CpuText.Color = #FFFFFFFF;
    }


  }

  // This is a slot method.
  $rect <340,140,540,180>
  slot NextType
  {
    sender; /* the method is called from the sender object */

    switch ( GraphicsFactory.TypeOfItems )
    {
      case Accelerator::GraphicsType.RectCopy:
        ChangeType( Accelerator::GraphicsType.BmpCopy );
      case Accelerator::GraphicsType.BmpCopy:
        ChangeType( Accelerator::GraphicsType.RectBlend );
      case Accelerator::GraphicsType.RectBlend:
        ChangeType( Accelerator::GraphicsType.BmpBlend );
      case Accelerator::GraphicsType.BmpBlend:
        ChangeType( Accelerator::GraphicsType.AlphaBmp );
      default:
        ChangeType( Accelerator::GraphicsType.RectCopy );
    }
  }

  // This is a slot method.
  $rect <340,220,540,260>
  slot AcceleratorState
  {
    sender; /* the method is called from the sender object */

    /* toggle accelerator state */
    accState = !accState;
    ChromArtImage.Visible = accState;

    $if !$prototyper

    var int32 active = 0;
    if ( accState )
      active = 1;

    native( active )
    {
      extern void STM32UseDMA2D( int aActive );

      STM32UseDMA2D( active );
    }

    $endif

  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Text1
  {
    preset Bounds = <240,0,320,20>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "Framerate";
    preset Font = Accelerator::FontSmall;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text FpsText
  {
    preset Bounds = <240,20,320,50>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "0 fps";
    preset Font = Accelerator::FontLarge;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Text2
  {
    preset Bounds = <240,60,320,80>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "CPU Load";
    preset Font = Accelerator::FontSmall;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text CpuText
  {
    preset Bounds = <240,80,320,110>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "0 %%";
    preset Font = Accelerator::FontLarge;
    preset Color = #FFFFFFFF;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Text3
  {
    preset Bounds = <240,120,320,140>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "Scenario";
    preset Font = Accelerator::FontSmall;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Text4
  {
    preset Bounds = <240,180,320,200>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "Accelerator";
    preset Font = Accelerator::FontSmall;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text ScenarioText
  {
    preset Bounds = <10,0,140,30>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "Alpha8 Blend";
    preset Font = Accelerator::FontMedium;
  }

  // This is a method.
  $rect <540,140,740,180>
  method void ChangeType( arg Accelerator::GraphicsType aType )
  {
    /* change the type of the graphics widget */
    GraphicsFactory.TypeOfItems = aType;

    switch ( aType )
    {
      case Accelerator::GraphicsType.RectCopy:
      {
        GraphicsFactory.NoOfItems = NoOfItemsRectCopy;
        ScenarioText.String = "Rectangle Copy";
      }
      case Accelerator::GraphicsType.BmpCopy:
      {
        GraphicsFactory.NoOfItems = NoOfItemsBmpCopy;
        ScenarioText.String = "Bitmap Copy";
      }
      case Accelerator::GraphicsType.RectBlend:
      {
        GraphicsFactory.NoOfItems = NoOfItemsRectBlend;
        ScenarioText.String = "Rectangle Blend";
      }
      case Accelerator::GraphicsType.BmpBlend:
      {
        GraphicsFactory.NoOfItems = NoOfItemsBmpBlend;
        ScenarioText.String = "Bitmap Blend";
      }
      case Accelerator::GraphicsType.AlphaBmp:
      {
        GraphicsFactory.NoOfItems = NoOfItemsAlpha8Blend;
        ScenarioText.String = "Alpha8 Blend";
      }
      default:
        ;
    }
  }

  // This is an image view.
  $rect <20,20,160,60>
  object Views::Image ChromArtImage
  {
    preset Bounds = <130,0,230,30>;
    preset Bitmap = Accelerator::ChromArt;
  }

  $rect <20,20,160,60>
  object Flat::ActionButton ActionButton
  {
    preset Bounds = <240,140,310,170>;
    preset OnAction = NextType;
    preset Caption = "Next";
  }

  $rect <20,20,160,60>
  object Flat::ActionButton ActionButton1
  {
    preset Bounds = <240,200,310,230>;
    preset OnAction = AcceleratorState;
    preset Caption = "on/off";
  }

  // This is a variable.
  $rect <540,220,740,260>
  var bool accState = true;

  // Timer object to drive the auto demo mode.
  $rect <340,290,540,330>
  object Core::Timer AutoDemoTimer
  {
    preset OnTrigger = NextType;
    preset Period = 5000;
    preset Begin = 0;
  }

  // Property to define the number of objects for this drawing operation.
  $rect <740,10,940,50>
  property int32 NoOfItemsRectCopy = 16;

  // Property to define the number of objects for this drawing operation.
  $rect <740,50,940,90>
  property int32 NoOfItemsBmpCopy = 8;

  // Property to define the number of objects for this drawing operation.
  $rect <740,90,940,130>
  property int32 NoOfItemsRectBlend = 6;

  // Property to define the number of objects for this drawing operation.
  $rect <740,130,940,170>
  property int32 NoOfItemsBmpBlend = 6;

  // Property to define the number of objects for this drawing operation.
  $rect <740,170,940,210>
  property int32 NoOfItemsAlpha8Blend = 6;

  // This is a method.
  $rect <740,220,940,260>
  method void Done()
  {
    $if !$prototyper

    /* ensure that DMA2D is running when this demo is left */
    native
    {
      extern void STM32UseDMA2D( int aActive );

      STM32UseDMA2D( 1 );
    }

    $endif
  }
}

// Font resource for large font - used for the caption text items.
$rect <230,20,430,60>
$output false
resource Resources::Font FontLarge
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 30;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0x7F;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
}

// Bitmap resource for the Embedded Wizard logo.
$rect <450,20,650,60>
$output false
resource Resources::Bitmap Logo
{
  attr bitmapfile FileName;
  attr alphafile AlphaName = .\Res\EmWiLogo.png;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Font resource for small font - used for the description text items.
$rect <230,100,430,140>
$output false
resource Resources::Font FontSmall
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 14;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
}

// This is the unit 'Accelerator' of the GraphicsAccelerator example.
// 
// The unit contains the class 'Accelerator' that implements the appearance and the \
// behavior of the entire UI application.
// The class 'GraphicsFactory' is used by the application in order to generate drawing \
// instructions / animations in an endless manner.
// 
// Furthermore, the unit contains all the necessary resources for the sample: Three \
// different font resources and a couple of bitmap resource.
note legend Note1
{
  attr Bounds = <10,320,860,440>;
}

// The class 'GraphicsFactory' implements a component that draws a couple of graphics \
// objects.
$rect <20,110,220,150>
$output false
class GraphicsFactory : Core::Group
{
  $rect <10,260,210,300>
  inherited method Draw()
  {
    var int32 inx = 0;

    /* draw embedded components, like background rectangle (if any) */
    super( aCanvas, aClip, aOffset, aOpacity, aBlend );

    aOffset = aOffset + Bounds.origin;

    while ( inx < 64 )
    {
      var Resources::Bitmap bmp;
      var point pos = Position[ inx ] + aOffset;
      var point size = Size[ inx ];
      var color col = Color[ inx ];

      if ( Position[ inx ].y <= Bounds.h )
      {
        switch( Type[ inx ])
        {
          case Accelerator::GraphicsType.RectCopy:
          {
            aCanvas.FillRectangle( aClip, rect( pos, pos + size ), col, col, col, col, aBlend );
          }
          case Accelerator::GraphicsType.RectBlend:
          {
            aCanvas.FillRectangle( aClip, rect( pos, pos + size ), col, col, col, col, aBlend );
          }
          case Accelerator::GraphicsType.BmpCopy:
          {
            bmp = ImagesForCopy[ inx % ImagesForCopy.size ];
            aCanvas.CopyBitmap( aClip, bmp, 0, rect( pos, pos + size ), <0,0>, col, col, col, col, aBlend );
          }
          case Accelerator::GraphicsType.BmpBlend:
          {
            bmp = ImagesForBlend[ inx % ImagesForBlend.size ];
            aCanvas.CopyBitmap( aClip, bmp, 0, rect( pos, pos + size ), <0,0>, col, col, col, col, aBlend );
          }
          case Accelerator::GraphicsType.AlphaBmp:
          {
            bmp = EmWiLogo;
            aCanvas.CopyBitmap( aClip, bmp, 0, rect( pos, pos + size ), <0,0>, col, col, col, col, aBlend );
          }
          default:
            ;
        }
      }

      /* next item */
      inx = inx + 1;
    }

    idlesignal TriggerNextRedraw;
  }

  $rect <430,200,630,240>
  inherited property Bounds = <0,0,400,240>;

  $rect <10,310,210,350>
  inherited method UpdateLayout()
  {
    aSize;
    var int32 inx;

    /* initialize the necessary number of members */
    for ( inx = 0; inx < NoOfItems; inx = inx + 1 )
    {
      RandomizeItem( inx );

      /* modify positions to get a good start apperance */
      Position[ inx ].y = math_rand( 0, Bounds.h - Size[ inx ].y );

    }

    idlesignal TriggerNextRedraw;
  }

  // Array to store the position of the graphics objects.
  $rect <430,260,630,300>
  array point Position[ 64 ];

  // The property 'NoOfItems' determines the number of graphical objects drawn within \
  // this component.
  $rect <430,10,630,50>
  property int32 NoOfItems = 10;

  $rect <430,50,630,90>
  onset NoOfItems
  {
    var int32 inx;

    /* check limits */
    if ( value < 0 )
      value = 0;
    if ( value > 64 )
      value = 64;

    /* check for update */
    if ( pure NoOfItems == value )
      return;

    /* create random values if the number of items increases */
    for( inx = pure NoOfItems; inx < value; inx = inx + 1 )
      RandomizeItem( inx );

    /* finally, store the new value */
    pure NoOfItems = value;

  }

  // Slot method to invalidate the entire component. This slot method should be triggered \
  // only by using 'idelsignal' in order to ensure that the invalidation happens \
  // after the next screen update.
  $rect <10,410,210,450>
  slot TriggerNextRedraw
  {
    InvalidateArea( Bounds.orect );

    var int32 inx = 0;

    while ( inx < 64 )
    {
      var point size = Size[ inx ];

      if ( Position[ inx ].y <= Bounds.h )
      {
        /* modify position and attributes */
        Position[ inx ] = Position[ inx ] + DeltaPos[ inx ];

        /* check if item is out of bounds on left or right side */
        if (( Position[ inx ].x + size.x < 0 ) || ( Position[ inx ].x > Bounds.w ))
          Position[ inx ].y = Bounds.h + 1;
      }

      /* if object has moved outside, calculate a new set of values */
      if (( Position[ inx ].y > Bounds.h ) && ( inx < pure NoOfItems ))
        RandomizeItem( inx );

      /* next item */
      inx = inx + 1;
    }

  }

  // Array to store the movement of the graphics objects.
  $rect <430,300,630,340>
  array point DeltaPos[ 64 ];

  // Array to store the color of the graphics objects.
  $rect <430,380,630,420>
  array color Color[ 64 ];

  // The method 'RandomizeItem' calculates random values for the graphics object \
  // with the given index.
  $rect <10,360,210,400>
  method void RandomizeItem( arg int32 aIndex )
  {
    var point size;

    switch ( TypeOfItems )
    {
      case Accelerator::GraphicsType.RectCopy:
      {
        /* calculate a random size for the rectangle */
        size = point( math_rand( Bounds.w / 3, 2 * Bounds.w / 3), math_rand( Bounds.h / 3, 2 * Bounds.h / 3 ));

        Position[ aIndex ] = point( math_rand( 0, Bounds.w - size.x ), -size.y );
        Size[ aIndex ]     = size;
        Color[ aIndex ]    = color( (uint8)math_rand( 0, 255), (uint8)math_rand( 0, 255), (uint8)math_rand( 0, 255), 0xFF );
      }
      case Accelerator::GraphicsType.RectBlend:
      {
        /* calculate a random size for the rectangle */
        size = point( math_rand( Bounds.w / 3, 2 * Bounds.w / 3), math_rand( Bounds.h / 3, 2 * Bounds.h / 3 ));

        Position[ aIndex ] = point( math_rand( 0, Bounds.w - size.x ), -size.y );
        Size[ aIndex ]     = size;
        Color[ aIndex ]    = color( (uint8)math_rand( 0, 255), (uint8)math_rand( 0, 255), (uint8)math_rand( 0, 255), 0xAA );
      }
      case Accelerator::GraphicsType.BmpCopy:
      {
        /* take the size of the first image (it is assumed that all images have the same size) */
        size = ImagesForCopy[ 0 ].FrameSize;

        Position[ aIndex ] = point( math_rand( 0, Bounds.w - size.x ), -size.y );
        Size[ aIndex ]     = size;
        Color[ aIndex ]    = #FFFFFFFF;
      }
      case Accelerator::GraphicsType.BmpBlend:
      {
        /* take the size of the first image (it is assumed that all images have the same size) */
        size = ImagesForBlend[ 0 ].FrameSize;

        Position[ aIndex ] = point( math_rand( 0, Bounds.w - size.x ), -size.y );
        Size[ aIndex ]     = size;
        Color[ aIndex ]    = #FFFFFFFF;
      }
      case Accelerator::GraphicsType.AlphaBmp:
      {
        /* take the size of the logo image */
        size = EmWiLogo.FrameSize;

        Position[ aIndex ] = point( math_rand( 0, Bounds.w - size.x ), -size.y );
        Size[ aIndex ]     = size;
        Color[ aIndex ]    = color( (uint8)math_rand( 0, 255), (uint8)math_rand( 0, 255), (uint8)math_rand( 0, 255), 0xAA );
      }
      default:
        ;
    }

    /* calculate the movement of the object */
    DeltaPos[ aIndex ] = point( math_rand( -2, 2 ), math_rand( 1 , $ScreenSize.y / 50 ));

    /* store the type of object */
    Type[ aIndex ] = TypeOfItems;


  }

  // The property 'TypeOfItems' determines the kind of all new graphical objects \
  // drawn within this component.
  $rect <430,110,630,150>
  property Accelerator::GraphicsType TypeOfItems = Accelerator::GraphicsType.AlphaBmp;

  // Array to store the size of the graphics objects.
  $rect <430,340,630,380>
  array point Size[ 64 ];

  // Array to store all bitmap resources used for the bitmap blending operation.
  $rect <220,260,420,300>
  array Resources::Bitmap ImagesForBlend[ 7 ] =
  (
    Default[0] = Accelerator::ImgBlend1;
    Default[1] = Accelerator::ImgBlend2;
    Default[2] = Accelerator::ImgBlend3;
    Default[3] = Accelerator::ImgBlend4;
    Default[4] = Accelerator::ImgBlend5;
    Default[5] = Accelerator::ImgBlend6;
    Default[6] = Accelerator::ImgBlend7;
  );

  // Array to store all bitmap resources used for the bitmap copy operation.
  $rect <220,300,420,340>
  array Resources::Bitmap ImagesForCopy[ 5 ] =
  (
    Default[0] = Accelerator::ImgCopy1;
    Default[1] = Accelerator::ImgCopy2;
    Default[2] = Accelerator::ImgCopy3;
    Default[3] = Accelerator::ImgCopy4;
    Default[4] = Accelerator::ImgCopy5;
  );

  // Array to store the type of the graphics objects.
  $rect <430,420,630,460>
  array Accelerator::GraphicsType Type[ 64 ];

  $rect <220,340,420,380>
  var Resources::Bitmap EmWiLogo = Accelerator::Logo;

  // The class 'GraphicsFactory' implements a component that draws a couple of graphics \
  // objects.
  // The parameters of the graphics objects are stored within a set of arrays for \
  // position, size, movement, color and size.
  // Each time, the component has to be drawn, the method Draw() is called from the \
  // Mosaic framework. Within this overridden method, all graphics objects are painted \
  // by using their individual settings.
  // This approach makes it very easy to implement such a graphics factory, instead \
  // of using many different Views objects.
  // 
  // As soon as the component is drawn, a signal is sent to TriggerNextRedraw() which \
  // forces an update of the entire component. This slot method is triggered by using \
  // 'idelsignal' in order to ensure that the invalidation happens after the next \
  // screen update.
  // 
  // The class 'GraphicsFactory' does not depend on a certain size - all graphics \
  // objects are arranged depending on the current size of the component. The 'GraphicsFactory' \
  // can be configured by using the properties 'NoOfItems' and 'TypeOfItems'.
  note legend Note
  {
    attr Bounds = <660,10,1070,440>;
  }
}

// Enumeration of all graphics objects supported by @GraphicsFactory.
$rect <20,160,220,200>
$output false
enum GraphicsType
{
  $rect <10,10,210,50>
  item RectCopy;

  $rect <220,10,420,50>
  item RectBlend;

  $rect <10,60,210,100>
  item BmpCopy;

  $rect <220,60,420,100>
  item BmpBlend;

  $rect <10,110,210,150>
  item AlphaBmp;
}

// Bitmap resource for small photo images.
$rect <670,20,870,60>
$output false
resource Resources::Bitmap ImgBlend1
{
  attr bitmapfile FileName = .\Res\Tomato.png;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <670,60,870,100>
$output false
resource Resources::Bitmap ImgBlend2
{
  attr bitmapfile FileName = .\Res\Pretzel.png;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <670,100,870,140>
$output false
resource Resources::Bitmap ImgBlend3
{
  attr bitmapfile FileName = .\Res\Trefoil.png;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <670,140,870,180>
$output false
resource Resources::Bitmap ImgBlend4
{
  attr bitmapfile FileName = .\Res\Orange.png;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <670,180,870,220>
$output false
resource Resources::Bitmap ImgBlend5
{
  attr bitmapfile FileName = .\Res\Kiwi.png;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <670,220,870,260>
$output false
resource Resources::Bitmap ImgBlend6
{
  attr bitmapfile FileName = .\Res\Flower.png;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <670,260,870,300>
$output false
resource Resources::Bitmap ImgBlend7
{
  attr bitmapfile FileName = .\Res\Citron.png;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <450,100,650,140>
$output false
resource Resources::Bitmap ImgCopy1
{
  attr bitmapfile FileName = .\Res\Img_01.jpg;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <450,140,650,180>
$output false
resource Resources::Bitmap ImgCopy2
{
  attr bitmapfile FileName = .\Res\Img_02.jpg;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <450,180,650,220>
$output false
resource Resources::Bitmap ImgCopy3
{
  attr bitmapfile FileName = .\Res\Img_03.jpg;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <450,220,650,260>
$output false
resource Resources::Bitmap ImgCopy4
{
  attr bitmapfile FileName = .\Res\Img_04.jpg;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for small photo images.
$rect <450,260,650,300>
$output false
resource Resources::Bitmap ImgCopy5
{
  attr bitmapfile FileName = .\Res\Img_05.jpg;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Bitmap resource for the Embedded Wizard logo.
$rect <450,60,650,100>
$output false
resource Resources::Bitmap ChromArt
{
  attr bitmapfile FileName = .\Res\Chrom-ART.png;
  attr alphafile AlphaName;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
}

// Font resource for large font - used for the caption text items.
$rect <230,60,430,100>
$output false
resource Resources::Font FontMedium
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 20;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0x7F;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
}
