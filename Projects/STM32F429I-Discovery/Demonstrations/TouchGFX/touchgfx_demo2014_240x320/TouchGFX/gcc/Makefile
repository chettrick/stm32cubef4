###############################################################################
#
# @brief     This file is part of the TouchGFX 4.8.0 evaluation distribution.
#
# @author    Draupner Graphics A/S <http://www.touchgfx.com>
#
###############################################################################
#
# @section Copyright
#
# This file is free software and is provided for example purposes. You may
# use, copy, and modify within the terms and conditions of the license
# agreement.
#
# This is licensed software for evaluation use, any use must strictly comply
# with the evaluation license agreement provided with delivery of the
# TouchGFX software.
#
# The evaluation license agreement can be seen on www.touchgfx.com
#
# @section Disclaimer
#
# DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Draupner Graphics A/S has
# no obligation to support this software. Draupner Graphics A/S is providing
# the software "AS IS", with no express or implied warranties of any kind,
# including, but not limited to, any implied warranties of merchantability
# or fitness for any particular purpose or warranties against infringement
# of any proprietary rights of a third party.
#
# Draupner Graphics A/S can not be held liable for any consequential,
# incidental, or special damages, or any other relief, or for any claim by
# any third party, arising from your use of this software.
#
###############################################################################
# Get name of this Makefile
makefile_name := $(lastword $(MAKEFILE_LIST))

# Get path of this Makefile
makefile_path := $(dir $(abspath $(makefile_name)))

# Get path where the Application is
application_path := $(abspath $(makefile_path)/..)

# Change makefile_name to a relative path
makefile_name := $(patsubst $(application_path)/%,%,$(abspath $(makefile_name)))

# Get relative path to makefile
makefile_path_relative = $(patsubst $(application_path)/%,%,$(makefile_path))

# Relative path to the base Cube firmware folder
firmware_path := ../../../../../..

# Get identification of this system
ifeq ($(OS),Windows_NT)
UNAME := MINGW32_NT-6.2
else
UNAME := $(shell uname -s)
endif

board_name := STM32F429I-DISCO
platform := cortex_m4f

.PHONY: all clean assets flash intflash

ifneq ($(words $(makefile_path))$(words $(MAKEFILE_LIST)),11)
all clean assets flash intflash:
	@echo "************************************************"
	@echo "** You cannot have spaces in your path, sorry **"
	@echo "************************************************"
else

all: $(filter clean,$(MAKECMDGOALS))
all clean assets:
	@cd $(application_path) && $(MAKE) -r -f $(makefile_name) -s $(MFLAGS) _$@_

flash intflash: all
	@cd $(application_path) && $(MAKE) -r -f $(makefile_name) -s $(MFLAGS) _$@_

# Directories containing application-specific source and header files.
# Additional components can be added to this list. make will look for
# source files recursively in comp_name/src and setup an include directive
# for comp_name/include.
components := gui generated/gui_generated

# Location of folder containing bmp/png files.
asset_images_input  := assets/images

# Location of folder to search for ttf font files
asset_fonts_input  := assets/fonts

# Location of folder where the texts.xlsx is placed
asset_texts_input  := assets/texts

build_root_path := build
object_output_path := $(build_root_path)/$(board_name)
binary_output_path := $(build_root_path)/bin

# Location of output folders where autogenerated code from assets is placed
asset_root_path := generated
asset_images_output := $(asset_root_path)/images
asset_fonts_output := $(asset_root_path)/fonts
asset_texts_output := $(asset_root_path)/texts

#include application specific configuration
include $(application_path)/config/gcc/app.mk

os_source_files := $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/croutine.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/list.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/queue.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/tasks.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/timers.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_2.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c \
				   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c

os_include_paths := $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/include \
					$(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F \
					$(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS

os_wrapper := $(touchgfx_path)/os/OSWrappers.cpp

### END OF USER SECTION. THE FOLLOWING SHOULD NOT BE MODIFIED ###

ifeq ($(UNAME), Linux)
imageconvert_executable := $(touchgfx_path)/framework/tools/imageconvert/build/linux/imageconvert.out
fontconvert_executable := $(touchgfx_path)/framework/tools/fontconvert/build/linux/fontconvert.out
else
imageconvert_executable := $(touchgfx_path)/framework/tools/imageconvert/build/win/imageconvert.out
fontconvert_executable := $(touchgfx_path)/framework/tools/fontconvert/build/win/fontconvert.out
st_link_executable := "$(PROGRAMFILES)\\STMicroelectronics\\STM32 ST-LINK Utility\\ST-LINK Utility\\ST-LINK_CLI.exe"
endif

target_executable := target.elf
target_hex := target.hex

-include $(touchgfx_path)/config/toolchain-arm-none-eabi-gcc.mk
-include $(touchgfx_path)/config/toolchain-arm-none-eabi-gcc-cm4f.mk

#include everything + specific vendor folders
framework_includes := $(touchgfx_path)/framework/include

#this needs to change when assset include folder changes.
all_components_except_images := $(components) \
				$(asset_fonts_output) \
				$(asset_texts_output)
all_components := $(all_components_except_images) \
		  $(asset_images_output)

#keep framework include and source out of this mess! :)
include_paths := $(library_includes) $(foreach comp, $(all_components), $(comp)/include) $(framework_includes)
source_paths = $(foreach comp, $(all_components_except_images), $(comp)/src)

# Finds files that matches the specified pattern. The directory list
# is searched recursively. It is safe to invoke this function with an
# empty list of directories.
#
# Param $(1): List of directories to search
# Param $(2): The file pattern to search for
define find
	$(foreach dir,$(1),$(foreach d,$(wildcard $(dir)/*),\
		$(call find,$(d),$(2))) $(wildcard $(dir)/$(strip $(2))))
endef
unexport find

imageconvert_bmp_lower_files := $(call find, $(asset_images_input), *.bmp)
imageconvert_bmp_upper_files := $(call find, $(asset_images_input), *.BMP)
imageconvert_png_lower_files := $(call find, $(asset_images_input), *.png)
imageconvert_png_upper_files := $(call find, $(asset_images_input), *.PNG)
imageconvert_image_files := $(imageconvert_bmp_lower_files) \
			    $(imageconvert_bmp_upper_files) \
			    $(imageconvert_png_lower_files) \
			    $(imageconvert_png_upper_files)
imageconvert_cpp_files := $(imageconvert_bmp_lower_files:$(asset_images_input)/%.bmp=$(asset_images_output)/src/%.cpp) \
			  $(imageconvert_bmp_upper_files:$(asset_images_input)/%.BMP=$(asset_images_output)/src/%.cpp) \
			  $(imageconvert_png_lower_files:$(asset_images_input)/%.png=$(asset_images_output)/src/%.cpp) \
			  $(imageconvert_png_upper_files:$(asset_images_input)/%.PNG=$(asset_images_output)/src/%.cpp)

source_files := $(call find, $(source_paths),*.cpp) $(imageconvert_cpp_files) $(asset_images_output)/src/BitmapDatabase.cpp

gcc_source_files := $(touchgfx_path)/framework/config/gcc/stdio.c \
                    $(touchgfx_path)/framework/config/gcc/stdlib.c \
                    $(touchgfx_path)/framework/config/gcc/string.c

c_compiler_options += -DST -DSTM32F429xx -DUSE_HAL_DRIVER
cpp_compiler_options += -DST -DSTM32F429xx -DUSE_HAL_DRIVER

board_include_paths := \
	$(firmware_path)/Drivers/CMSIS/Include \
	$(firmware_path)/Drivers/CMSIS/Device/ST/STM32F4xx/Include \
	$(firmware_path)/Drivers/BSP/STM32F429I-Discovery \
	$(firmware_path)/Drivers/STM32F4xx_HAL_Driver/Inc \
	../Core/Inc \
	target

include_paths += $(board_include_paths) $(os_include_paths)

board_c_files := $(wildcard $(firmware_path)/Drivers/BSP/STM32F429I-Discovery/*.c)
board_c_files := $(filter-out %lcd.c, $(board_c_files))
board_c_files += $(wildcard $(firmware_path)/Drivers/STM32F4xx_HAL_Driver/Src/*.c)
board_c_files := $(filter-out %template.c, $(board_c_files))

board_c_files += $(firmware_path)/Drivers/BSP/Components/ili9341/ili9341.c
board_c_files += $(firmware_path)/Drivers/BSP/Components/stmpe811/stmpe811.c

c_source_files := $(call find, $(source_paths),*.c) $(os_source_files) $(makefile_path_relative)/isr.c $(board_c_files) $(call find, ../Core/Src,*.c) $(call find, target,*.c)
source_files += $(os_wrapper) $(touchgfx_path)/config/gcc/gccstubs.cpp
source_files += ../Core/Src/main.cpp $(call find, target,*.cpp)
source_files += $(touchgfx_path)/framework/source/platform/core/arm/cortex-m/CortexMMCUInstrumentation.cpp

object_files := $(source_files:$(touchgfx_path)/%.cpp=$(object_output_path)/touchgfx/%.o) $(c_source_files:$(touchgfx_path)/%.c=$(object_output_path)/touchgfx/%.o)
object_files := $(object_files:$(firmware_path)/Drivers/%.c=$(object_output_path)/%.o)
object_files := $(object_files:$(firmware_path)/Middlewares/%.c=$(object_output_path)/%.o)
object_files := $(object_files:%.cpp=$(object_output_path)/%.o)
object_files := $(object_files:%.c=$(object_output_path)/%.o)
dependency_files := $(object_files:%.o=%.d)

textconvert_script_path := $(touchgfx_path)/framework/tools/textconvert
textconvert_executable := $(call find, $(textconvert_script_path), *.rb)

text_database := $(asset_texts_input)/texts.xlsx

libraries := touchgfx
library_include_paths := $(touchgfx_path)/lib/core/$(platform)/gcc

VPATH := $(firmware_path)/Drivers
VPATH += $(firmware_path)/Middlewares

.PHONY: _all_ _clean_ _assets_ _flash_ _intflash_ generate_assets build_executable

# Force linking each time
.PHONY: $(binary_output_path)/$(target_executable)

_all_: generate_assets

_flash_ _intflash_:
	@$(st_link_executable) -c -P $(binary_output_path)/intflash.hex 0x08000000 -Rst

generate_assets: _assets_
	@$(MAKE) -f $(makefile_name) -r -s $(MFLAGS) build_executable
build_executable: $(binary_output_path)/$(target_executable)

# write object_files to a temp file used by the linker. This is necessary to avoid exceeding 32Kb limit in a mingw command line for large touchgfx projects
ifeq ($(MAKECMDGOALS),build_executable)
$(shell mkdir -p $(object_output_path))
ifeq ($(MAKE_VERSION),4.1)
$(file >$(build_root_path)/objects.tmp) $(foreach F,$(object_files),$(file >>$(build_root_path)/objects.tmp,$F))
else
$(shell echo "$(object_files)">$(build_root_path)/objects.tmp)
endif
endif

$(binary_output_path)/$(target_executable): $(object_files)
	@echo Linking $(@)
	@mkdir -p $(@D)
	@$(linker) \
		$(linker_options) -T $(makefile_path_relative)/application.ld -Wl,-Map=$(@D)/application.map $(linker_options_local) \
		$(patsubst %,-L%,$(library_include_paths)) \
		@$(build_root_path)/objects.tmp -o $@ \
		-Wl,--start-group $(patsubst %,-l%,$(libraries)) -Wl,--end-group
	@rm -f $(build_root_path)/objects.tmp
	@echo "Producing additional output formats..."
	@echo "  intflash.hex - Internal flash, hex"
	@$(objcopy) -O ihex $@ $(@D)/intflash.hex

$(object_output_path)/touchgfx/%.o: $(touchgfx_path)/%.cpp $(application_path)/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(cpp_compiler) \
		-MMD -MP $(cpp_compiler_options) $(cpp_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/%.o: %.cpp $(application_path)/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(cpp_compiler) \
		-MMD -MP $(cpp_compiler_options) $(cpp_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/touchgfx/%.o: $(touchgfx_path)/%.c $(application_path)/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(c_compiler) \
		-MMD -MP $(c_compiler_options) $(c_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/%.o: %.c $(application_path)/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(c_compiler) \
		-MMD -MP $(c_compiler_options) $(c_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

ifeq ($(MAKECMDGOALS),build_executable)
$(firstword $(dependency_files)): $(application_path)/config/gcc/app.mk
	@rm -rf $(object_output_path)
-include $(dependency_files)
endif

_assets_: $(asset_images_output)/include/BitmapDatabase.hpp $(asset_texts_output)/include/texts/TextKeysAndLanguages.hpp

ifeq ($(MAKECMDGOALS),$(filter $(MAKECMDGOALS),_all_ _assets_))
-include $(touchgfx_path)/config/gcc/convert-rules.mk
endif

_clean_:
	@echo Cleaning
	@rm -rf $(build_root_path)
	@rm -rf $(asset_root_path)

endif
